# app.py
import streamlit as st
import os
from src.data_loader import load_galaxy_data, list_available_galaxies
from src.sound_mapper import map_values_to_midi_notes, map_to_velocity
from src.midi_generator import create_midi_file
import plotly.graph_objects as go
from src.midi_generator import convert_midi_to_wav
from funciones import sonificar_galaxia, cargar_datos
from funciones import graficar_galaxia_plotly
import matplotlib.pyplot as plt

# Inicializar st.session_state
if "midi_generado" not in st.session_state:
    st.session_state["midi_generado"] = False
if "wav_generado" not in st.session_state:
    st.session_state["wav_generado"] = False

# Constantes locales
DATA_DIR = "data"
MIDI_OUTPUT = "output.mid"
WAV_OUTPUT = "output.wav"
SOUNDFONT_PATH = "FluidR3_GM.sf2"
#SOUNDFONT_PATH = "GeneralUser-GS.sf2"

# Streamlit le crea webs sin complique y las llama desde python
st.set_page_config(page_title="Sonificaci√≥n Gal√°ctica", layout="wide")
st.title("üåå Sonificaci√≥n de Galaxias")
st.write("Convierte datos astron√≥micos en m√∫sica üé∂ usando MIDI")
st.markdown(
    """
    ¬øAlguna vez te has preguntado c√≥mo ser√≠a escuchar una galaxia? Gracias a las tecnolog√≠as de sonificaci√≥n, hoy es posible traducir datos astron√≥micos en sonidos y explorar el cosmos a trav√©s del sentido de la audici√≥n.
    
    Galaxy Sonification es una aplicaci√≥n interactiva que transforma los espectros electromagn√©ticos de las galaxias en paisajes sonoros, permitiendo identificar caracter√≠sticas distintivas seg√∫n su tipo morfol√≥gico. Aunque existen tres tipos principales de galaxias ‚Äîel√≠pticas, espirales e irregulares‚Äî, la aplicaci√≥n ofrece actualmente dos modos espec√≠ficos de sonificaci√≥n: uno para galaxias el√≠pticas y otro para espirales. Sin embargo, tambi√©n puedes cargar espectros de galaxias irregulares y experimentar con ambos modos para descubrir nuevas formas de representaci√≥n sonora.
    """
)
st.info("Para una generaci√≥n m√°s r√°pida del audio, te recomendamos utilizar tempos altos o seleccionar duraciones cortas para las notas, como corcheas o semicorcheas. Esto no solo agiliza el procesamiento, sino que tambi√©n permite una exploraci√≥n m√°s fluida del contenido espectral.")
# Paso 1: Selecci√≥n de galaxia y carga de archivo en columnas
col_galaxia, col_upload = st.columns([2, 1])

with col_upload:
    st.markdown('O sube tu propio espectro (.txt) [formato NED, ver m√°s en [NED](https://ned.ipac.caltech.edu/)]')
    uploaded_file = st.file_uploader("", type=["txt"])

with col_galaxia:
    galaxias = list_available_galaxies(DATA_DIR)
    # Si hay archivo subido, agregar su nombre a la lista de galaxias (si no est√°)
    if uploaded_file is not None:
        nombre_txt_usuario = uploaded_file.name
        if nombre_txt_usuario not in galaxias:
            galaxias = [nombre_txt_usuario] + galaxias  # Lo pone al inicio
        galaxia_default = nombre_txt_usuario
    else:
        galaxia_default = galaxias[0] if galaxias else None

    galaxia = st.selectbox("Selecciona una galaxia:", galaxias, index=galaxias.index(galaxia_default) if galaxia_default in galaxias else 0)

# Diccionario de descripciones (puedes ampliarlo con tus propias descripciones)
descripciones_galaxias = {
    "NGC_6643.txt": "NGC 6643 es una galaxia espiral ubicada en la constelaci√≥n de Draco.",
    "NGC_1300.txt": "NGC 1300 es una galaxia espiral barrada situada en la constelaci√≥n de Eridanus.",
    "NGC_3370.txt": "NGC 3370 es una galaxia espiral en la constelaci√≥n de Leo.",
    "NGC_4881.txt": "NGC 4881 es una galaxia el√≠ptica en el c√∫mulo de Coma.",
    "NGC_1569.txt": (
        "NGC 1569 es una galaxia irregular enana ubicada en la constelaci√≥n de la Jirafa a 11 millones a√±os luz.\n"
        "La galaxia llamada NGC 1569 brilla intensamente gracias a la luz de millones de estrellas j√≥venes que se han formado recientemente.\n"
        "NGC 1569 est√° formando estrellas a un ritmo 100 veces m√°s r√°pido que el observado en nuestra propia galaxia, la V√≠a L√°ctea.\n"
        "Este ritmo fren√©tico de formaci√≥n estelar ha continuado casi sin pausa durante los √∫ltimos 100 millones de a√±os.\n"
        "En el centro de la galaxia se encuentra un grupo de tres c√∫mulos estelares gigantes, cada uno con m√°s de un mill√≥n de estrellas. "
        "(Dos de estos c√∫mulos est√°n tan cerca entre s√≠ que parecen uno solo). Estos c√∫mulos est√°n ubicados en una gran cavidad central, "
        "cuyo gas ha sido expulsado por la acci√≥n de muchas estrellas masivas y j√≥venes que ya explotaron como supernovas.\n"
        "Estas explosiones tambi√©n provocaron un flujo violento de gas y part√≠culas que ha esculpido enormes estructuras de gas. "
        "Una de estas estructuras, visible en la parte inferior derecha, mide unos 3,700 a√±os luz de longitud.\n"
        "Informaci√≥n y figura tomadas de https://science.nasa.gov/asset/hubble/starburst-galaxy-ngc-1569/"
    ),
    "NGC_2276.txt": (
        "NGC 2276 es una galaxia espiral en interacci√≥n. En la mayor√≠a de las galaxias espirales, el centro suele mostrar un n√∫cleo brillante compuesto por estrellas m√°s viejas de color amarillento. "
        "Sin embargo, en el caso de NGC 2276, ese n√∫cleo parece estar desplazado hacia la parte superior izquierda. "
        "Esto se debe a que una galaxia vecina situada a la derecha de NGC 2276 (NGC 2300, que no aparece en la imagen) la est√° atrayendo gravitacionalmente. "
        "Esa fuerza est√° tirando del disco de estrellas azules en un lado, distorsionando la forma t√≠pica de 'huevo frito' que suelen tener estas galaxias. "
        "Este tipo de ‚Äútira y afloja‚Äù entre galaxias cercanas no es raro en el universo. Sin embargo, al igual que los copos de nieve, ning√∫n encuentro cercano entre galaxias es exactamente igual a otro. "
        "Adem√°s, en el borde superior izquierdo de NGC 2276 se forma un brazo azul brillante, compuesto por estrellas j√≥venes y masivas de corta vida. "
        "Estas estrellas marcan una regi√≥n de intensa formaci√≥n estelar, que pudo haber sido provocada por una colisi√≥n anterior con una galaxia enana. "
        "Tambi√©n es posible que se deba a que NGC 2276 se est√© desplazando a trav√©s del gas sobrecalentado que se encuentra entre galaxias en los c√∫mulos gal√°cticos. "
        "Al atravesar este gas, se comprime y colapsa, dando lugar al nacimiento masivo de nuevas estrellas. "
        "La galaxia espiral NGC 2276 se encuentra a unos 120 millones de a√±os luz, en la constelaci√≥n boreal de Cefeo. "
        "Informaci√≥n y figura tomadas de https://science.nasa.gov/asset/hubble/ngc-2276/"
    ),
    "NGC_3379.txt": (
        "M105 (tambi√©n conocida como NGC 3379) es una galaxia el√≠ptica que se encuentra a unos 32 millones de a√±os luz de distancia, en la constelaci√≥n de Leo. Es la galaxia el√≠ptica m√°s grande del cat√°logo de Messier que no forma parte del c√∫mulo de Virgo. Sin embargo, M105 s√≠ pertenece al Grupo de M96 (o Leo I), junto con sus vecinas M95, M96 y varias otras galaxias m√°s d√©biles.\n"
        "La galaxia fue descubierta en 1781 por Pierre M√©chain, colega de Charles Messier, pocos d√≠as despu√©s de haber localizado M95 y M96. Curiosamente, M105 no fue incluida originalmente en el cat√°logo de Messier. Fue a√±adida en 1947, cuando la astr√≥noma Helen S. Hogg encontr√≥ una carta escrita por M√©chain en la que describ√≠a esta galaxia.\n"
        "El telescopio espacial Hubble observ√≥ el n√∫cleo de M105 y midi√≥ el movimiento de las estrellas que giran alrededor de su centro. Estas observaciones confirmaron la presencia de un agujero negro supermasivo en el coraz√≥n de la galaxia. Seg√∫n estimaciones recientes, este agujero negro podr√≠a tener una masa hasta 200 millones de veces mayor que la del Sol. Informaci√≥n y figura tomadas de https://science.nasa.gov/mission/hubble/science/explore-the-night-sky/hubble-messier-catalog/messier-105/"
    ),
    "NGC_4485.txt": (
        "La galaxia irregular NGC 4485 muestra claras se√±ales de haber estado involucrada en una especie de ‚Äúchoque y fuga‚Äù c√≥smico con otra galaxia que pas√≥ muy cerca. Pero en lugar de destruirla, este encuentro fortuito ha dado lugar al nacimiento de una nueva generaci√≥n de estrellas, y posiblemente, tambi√©n de planetas.\n"
        "En el lado derecho de la galaxia se observa una intensa actividad de formaci√≥n estelar, visible en la abundancia de estrellas j√≥venes azules y nebulosas rosadas donde se est√°n gestando nuevas estrellas. En contraste, el lado izquierdo parece m√°s intacto, conservando algunos indicios de lo que alguna vez fue una estructura espiral, que entonces evolucionaba de manera m√°s tranquila.\n"
        "La responsable de este encuentro es la galaxia m√°s grande NGC 4490, que no aparece en la imagen, ubicada fuera del encuadre, en la parte inferior. Estas dos galaxias rozaron sus bordes hace millones de a√±os y actualmente est√°n separadas por unos 24,000 a√±os luz. La interacci√≥n gravitacional entre ambas cre√≥ ondas de gas y polvo m√°s densas, lo que dispar√≥ la intensa formaci√≥n de estrellas en ambas galaxias.\n"
        "NGC 4485 es un ejemplo cercano del tipo de colisiones c√≥smicas que eran mucho m√°s comunes hace miles de millones de a√±os, cuando el universo era m√°s peque√±o y las galaxias estaban mucho m√°s juntas.\n"
        "Esta galaxia se encuentra a unos 25 millones de a√±os luz, en la constelaci√≥n boreal de Canes Venatici (Los Perros de Caza). Informaci√≥n y figura tomadas de https://science.nasa.gov/asset/hubble/ngc-4485/"
    ),
    # Agrega aqu√≠ m√°s descripciones seg√∫n tus galaxias
}

# Mostrar descripci√≥n e imagen si existe una galaxia seleccionada
if galaxia:
    col_desc, col_img = st.columns([2, 1])  # 2:1 para que el texto sea m√°s ancho que la imagen
    descripcion = descripciones_galaxias.get(galaxia, "Sin descripci√≥n disponible para esta galaxia.")
    with col_desc:
        st.markdown(f"**Descripci√≥n:** {descripcion}")
    # Buscar imagen en .png o .jpg
    imagen_path = os.path.join(DATA_DIR, galaxia.replace('.txt', '.png'))
    if not os.path.exists(imagen_path):
        imagen_path = os.path.join(DATA_DIR, galaxia.replace('.txt', '.jpg'))
    if not os.path.exists(imagen_path):
        imagen_path = os.path.join(DATA_DIR, galaxia.replace('.txt', '.jpeg'))
    with col_img:
        if os.path.exists(imagen_path):
            st.image(imagen_path, caption=f"Imagen de {galaxia}", use_container_width=True)
        else:
            st.info("No hay imagen disponible para esta galaxia.")

# Nuevo: Men√∫ para elegir el tipo de galaxia
st.subheader("üéº Selecciona el tipo de galaxia para la sonificaci√≥n:")
tipo_galaxia = st.radio("", ("Espiral", "El√≠ptica"), key="tipo_galaxia_radio")

if uploaded_file is not None:
    # Guardar el archivo subido temporalmente
    temp_path = os.path.join(DATA_DIR, "espectro_usuario.txt")
    with open(temp_path, "wb") as f:
        f.write(uploaded_file.read())
    file_path = temp_path
    galaxia = "espectro_usuario.txt"
    nombre_base = os.path.splitext(uploaded_file.name)[0]  # Usar nombre real del archivo subido
elif galaxia:
    file_path = os.path.join(DATA_DIR, galaxia)
    nombre_base = os.path.splitext(galaxia)[0]  # Usar nombre de la galaxia

if galaxia and file_path:
    data = cargar_datos(file_path)

    if data is not None:
        # Paso 3: Generar MIDI (move this block up if needed)
        # Elimina o comenta esta l√≠nea:
        # st.subheader("üéº Generar sonido")
        # Ahora el slider es el t√≠tulo principal:
        st.subheader("üéº Rango de longitudes de onda a sonificar")
        min_wavelength = float(data.iloc[:, 0].min())
        max_wavelength = float(data.iloc[:, 0].max())
        rango_onda = st.slider(
            "",
            min_value=min_wavelength,
            max_value=max_wavelength,
            value=(min_wavelength, max_wavelength),
            step=0.1
        )











        # Distribuci√≥n en columnas: gr√°fica a la izquierda, opciones a la derecha
        col_grafica, col_opciones = st.columns([2, 1])
        with col_grafica:
            st.subheader("üî≠ Visualizaci√≥n de datos")
            num_octavas = st.slider("N√∫mero de octavas", 1, 7, 5, key="num_octavas_slider")
            st.info("üéß Consejo: Para una mejor identificaci√≥n de las l√≠neas espectrales se recomienda utilizar entre 5 y 7 octavas.")
            # Define scale options and selection BEFORE plotting
            scale_options = {
                "Arm√≥nica Menor": [0, 2, 3, 5, 7, 8, 11],
                "Pentat√≥nica Menor": [0, 3, 5, 7, 10],
                "Mayor": [0, 2, 4, 5, 7, 9, 11],
                "Menor Natural": [0, 2, 3, 5, 7, 8, 10],
                "Crom√°tica": list(range(12))
            }
            selected_scale_name = st.selectbox("Selecciona una escala musical", list(scale_options.keys()))
            notas_escala = scale_options.get(selected_scale_name, scale_options["Arm√≥nica Menor"])
            
            # Ensure notas_escala is always a list
            if not isinstance(notas_escala, list):
                notas_escala = scale_options["Arm√≥nica Menor"] # Default to Arm√≥nica Menor

            fig = graficar_galaxia_plotly(
                archivo=file_path,
                tipo_galaxia=tipo_galaxia,
                rango_onda=rango_onda,
                nombre_archivo=nombre_base,
                num_octavas=num_octavas,
                notas_escala=notas_escala
            )
            min_intensity = float(data.iloc[:, 1].min())
            max_intensity = float(data.iloc[:, 1].max())
            num_notes_range = (24, 24 + (num_octavas * 12))

            # Paleta de colores c√≠clica para las notas
            note_colors = [
                "#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "7f7f7f", "#bcbd22", "#17becf", "#a93226", "#229954"
            ]

            # Graficar la curva general encima (opcional)
            fig.add_trace(go.Scatter(
                x=data.iloc[:, 0],
                y=data.iloc[:, 1],
                mode='lines',
                line=dict(color='gray', width=1),
                name=galaxia,
                opacity=1.0
            ))
            fig.add_vrect(
                x0=rango_onda[0], x1=rango_onda[1],
                fillcolor="orange", opacity=0.3,
                layer="below", line_width=0,
                annotation_text="Regi√≥n sonificada", annotation_position="top left"
            )

            fig.update_layout(
                title=f"Datos de {nombre_base}",
                plot_bgcolor="white",
                paper_bgcolor="white",
                margin=dict(l=60, r=10, t=40, b=40),
                xaxis=dict(
                    color="black",
                    showline=True,
                    linewidth=2,
                    linecolor="black",
                    mirror=True,
                    showgrid=False,
                    zeroline=False,
                    title=dict(text="Longitud de onda (√°ngstrom)", font=dict(color="black")),
                    tickfont=dict(color="black")  # <-- Esto hace visibles los n√∫meros del eje X
                ),
                yaxis=dict(
                    color="black",
                    showline=True,
                    linewidth=2,
                    linecolor="black",
                    mirror=True,
                    showgrid=False,
                    zeroline=False,
                    title=dict(text="Flujo normalizado", font=dict(color="black")),
                    tickfont=dict(color="black")  # <-- Esto hace visibles los n√∫meros del eje Y
                )
            )
            fig = graficar_galaxia_plotly(
                archivo=file_path,
                tipo_galaxia=tipo_galaxia,
                rango_onda=rango_onda,
                nombre_archivo=nombre_base,
                num_octavas=num_octavas,
                notas_escala=notas_escala
            )
            st.plotly_chart(fig)

        with col_opciones:
            st.subheader("üéº Opciones de Sonificaci√≥n")
            tempo = st.slider("Tempo (BPM)", min_value=40, max_value=240, value=120, step=1)
            figura = st.selectbox(
                "Duraci√≥n de la nota",
                [
                    ("ùÖù Redonda", 4.0),
                    ("ùÖû Blanca", 2.0),
                    ("ùÖü Negra", 1.0),
                    ("ùÖ† Corchea", 0.5),
                    ("ùÖ° Semicorchea", 0.25)
                ],
                index=2
            )
            duracion_nota = figura[1]
            instrumentos_midi = {
                "Piano ac√∫stico": 0,
                "Guitarra ac√∫stica": 24,
                "Viol√≠n": 40,
                "Trompeta": 56,
                "Flauta": 73,
                "√ìrgano": 19,
                "Saxof√≥n": 65,
                "Sintetizador": 81
            }
            instrumento_emision = st.selectbox(
                "Instrumento para Emisi√≥n",
                list(instrumentos_midi.keys()),
                index=0
            )
            instrumento_absorcion = st.selectbox(
                "Instrumento para Absorci√≥n",
                list(instrumentos_midi.keys()),
                index=1
            )
            # Bot√≥n grande y m√°s alto
            st.markdown(
                """
                <style>
                div.stButton > button {
                    font-size: 1.5em;
                    height: 4.5em; /* M√°s alto a√∫n */
                    width: 100%;
                    background-color: #6c63ff;
                    color: white;
                    border-radius: 10px;
                }
                </style>
                """,
                unsafe_allow_html=True
            )
            if st.button("üéπ Sonificar", use_container_width=True):
                # L√≥gica unificada usando la funci√≥n nueva
                nombre_base = os.path.splitext(galaxia)[0]
                salida_midi_emision = f"{nombre_base}_emision.mid"
                salida_midi_absorcion = f"{nombre_base}_absorcion.mid"
                salida_midi_completo = f"{nombre_base}_completo.mid"
                salida_wav_emision = f"{nombre_base}_emision.wav"
                salida_wav_absorcion = f"{nombre_base}_absorcion.wav"
                salida_wav_completo = f"{nombre_base}_completo.wav"

                salida_midi_emision_path, salida_midi_absorcion_path, salida_midi_completo_path = sonificar_galaxia(
                    archivo=file_path,
                    rango_onda=rango_onda,
                    tipo_galaxia=tipo_galaxia,
                    num_octavas=num_octavas,
                    tempo=tempo,
                    duracion_nota=duracion_nota,
                    instrumento_emision=instrumentos_midi[instrumento_emision],
                    instrumento_absorcion=instrumentos_midi[instrumento_absorcion],
                    notas_escala=notas_escala
                )
                # Convertir los MIDIs a WAV para previsualizaci√≥n
                try:
                    convert_midi_to_wav(salida_midi_emision_path, salida_wav_emision, SOUNDFONT_PATH)
                except Exception as e:
                    st.warning(f"No se pudo convertir {salida_midi_emision_path} a WAV: {e}")
                try:
                    convert_midi_to_wav(salida_midi_absorcion_path, salida_wav_absorcion, SOUNDFONT_PATH)
                except Exception as e:
                    st.warning(f"No se pudo convertir {salida_midi_absorcion_path} a WAV: {e}")
                try:
                    convert_midi_to_wav(salida_midi_completo_path, salida_wav_completo, SOUNDFONT_PATH)
                except Exception as e:
                    st.warning(f"No se pudo convertir {salida_midi_completo_path} a WAV: {e}")

                st.success("‚úÖ Archivos MIDI generados correctamente.")
                st.session_state["midi_generado"] = True
                st.session_state["wav_generado"] = True

        # Opciones de descarga horizontales
        if st.session_state["midi_generado"]:
            from pydub import AudioSegment
            wav_emision = f"{os.path.splitext(galaxia)[0]}_emision.wav"
            wav_absorcion = f"{os.path.splitext(galaxia)[0]}_absorcion.wav"
            wav_mix = f"{os.path.splitext(galaxia)[0]}_mix_preview.wav"
            if os.path.exists(wav_emision) and os.path.exists(wav_absorcion):
                audio_emision = AudioSegment.from_wav(wav_emision)
                audio_absorcion = AudioSegment.from_wav(wav_absorcion)
                min_len = min(len(audio_emision), len(audio_absorcion))
                audio_emision = audio_emision[:min_len]
                audio_absorcion = audio_absorcion[:min_len]
                audio_mix = audio_emision.overlay(audio_absorcion)
                audio_mix.export(wav_mix, format="wav")
                st.subheader("üîä Previsualizar sonido")
                st.audio(wav_mix, format="audio/wav")
                # Botones de descarga en horizontal
                col1, col2, col3, col4, col5, col6 = st.columns(6)
                archivos = [
                    (f"{os.path.splitext(galaxia)[0]}_emision.mid", "‚¨áÔ∏è MIDI Emisi√≥n"),
                    (f"{os.path.splitext(galaxia)[0]}_emision.wav", "‚¨áÔ∏è WAV Emisi√≥n"),
                    (f"{os.path.splitext(galaxia)[0]}_absorcion.mid", "‚¨áÔ∏è MIDI Absorci√≥n"),
                    (f"{os.path.splitext(galaxia)[0]}_absorcion.wav", "‚¨áÔ∏è WAV Absorci√≥n"),
                    (f"{os.path.splitext(galaxia)[0]}_completo.mid", "‚¨áÔ∏è MIDI Completo"),
                    (f"{os.path.splitext(galaxia)[0]}_completo.wav", "‚¨áÔ∏è WAV Completo"),
                ]
                cols = [col1, col2, col3, col4, col5, col6]
                for (archivo, label), col in zip(archivos, cols):
                    with col:
                        if os.path.exists(archivo):
                            with open(archivo, "rb") as f:
                                st.download_button(label, f, file_name=archivo, key=f"{archivo}_descarga1")
        